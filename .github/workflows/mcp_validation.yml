name: MCP Tools Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'config/mcp_tools_definition.json'
      - 'config/client_configurations/**'
      - 'src/adaptive_graph_of_thoughts/api/routes/mcp.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'config/mcp_tools_definition.json'
      - 'config/client_configurations/**'
      - 'src/adaptive_graph_of_thoughts/api/routes/mcp.py'

jobs:
  validate-mcp-tools:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema pydantic fastapi
    
    - name: Validate MCP Tools Definition
      run: |
        python -c "
        import json
        import jsonschema
        
        # Load and validate tools definition
        with open('config/mcp_tools_definition.json', 'r') as f:
            tools_data = json.load(f)
        
        # Basic structure validation
        required_keys = ['tools', 'resources', 'prompts']
        for key in required_keys:
            assert key in tools_data, f'Missing required key: {key}'
        
        # Validate each tool has required fields
        for tool in tools_data['tools']:
            assert 'name' in tool, 'Tool missing name'
            assert 'description' in tool, 'Tool missing description'
            assert 'inputSchema' in tool, 'Tool missing inputSchema'
        
        print('✓ MCP tools definition is valid')
        "
    
    - name: Validate Client Configurations
      run: |
        python -c "
        import json
        import os
        from pathlib import Path
        
        config_dir = Path('config/client_configurations')
        if config_dir.exists():
            for config_file in config_dir.glob('*.json'):
                with open(config_file, 'r') as f:
                    config = json.load(f)
                print(f'✓ {config_file.name} is valid JSON')
        else:
            print('No client configurations directory found')
        "
    
    - name: Test MCP Endpoint Schema
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        
        try:
            from adaptive_graph_of_thoughts.api.schemas import (
                MCPASRGoTQueryParams,
                MCPASRGoTQueryResult,
                MCPInitializeParams,
                MCPInitializeResult
            )
            print('✓ MCP schemas import successfully')
        except ImportError as e:
            print(f'✗ Schema import failed: {e}')
            sys.exit(1)
        "

  test-client-setup:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Test Client Setup Script
      run: |
        python src/adaptive_graph_of_thoughts/setup/client_setup.py help
        python src/adaptive_graph_of_thoughts/setup/client_setup.py list
    
    - name: Test Setup Shell Script
      run: |
        chmod +x scripts/setup_mcp_client.sh
        ./scripts/setup_mcp_client.sh help

  validate-smithery-config:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Smithery Configuration
      run: |
        python -c "
        import yaml
        
        with open('smithery.yaml', 'r') as f:
            config = yaml.safe_load(f)
        
        # Check required fields
        assert 'runtime' in config, 'Missing runtime field'
        assert 'startCommand' in config, 'Missing startCommand field'
        
        start_command = config['startCommand']
        assert 'mcpEndpoint' in start_command, 'Missing mcpEndpoint in startCommand'
        
        print('✓ Smithery configuration is valid')
        "
